<!DOCTYPE html>
<html lang="en">
<head>
	<title>ECE 4960 Fast Robots</title>
	<meta charset="utf-8">
	<meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
	
	<link href="https://fonts.googleapis.com/css?family=Nunito+Sans:200,300,400,600,700,800,900&display=swap" rel="stylesheet">

	<link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css">

	<link rel="stylesheet" href="css/animate.css">
	
	<link rel="stylesheet" href="css/owl.carousel.min.css">
	<link rel="stylesheet" href="css/owl.theme.default.min.css">
	<link rel="stylesheet" href="css/magnific-popup.css">
	
	<link rel="stylesheet" href="css/flaticon.css">
	<link rel="stylesheet" href="css/style.css">
	<link rel="stylesheet" href="font-awesome-4.7.0/css/font-awesome.min.css">
</head>
<body>
	
	<nav class="navbar navbar-expand-lg navbar-dark ftco_navbar bg-dark ftco-navbar-light" id="ftco-navbar">
		<div class="container">
			<a class="navbar-brand" href="index.html">ECE<span>4960</span>Caitlin Stanton</a>
			<button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#ftco-nav" aria-controls="ftco-nav" aria-expanded="false" aria-label="Toggle navigation">
				<span class="oi oi-menu"></span> Menu
			</button>

			<div class="collapse navbar-collapse" id="ftco-nav">
				<ul class="navbar-nav ml-auto">
					<li class="nav-item active"><a href="index.html" class="nav-link">Home</a></li>
					<!-- <li class="nav-item"><a href="about.html" class="nav-link">About</a></li>
					<li class="nav-item"><a href="work.html" class="nav-link">Work</a></li>
					<li class="nav-item"><a href="blog.html" class="nav-link">Blog</a></li> -->
					<!-- <li class="nav-item"><a href="contact.html" class="nav-link">Contact</a></li> -->
				</ul>
			</div>
		</div>
	</nav>
	<!-- END nav -->

	<section class="hero-wrap degree-right js-fullheight">
		<div class="home-slider js-fullheight owl-carousel">
			<div class="slider-item js-fullheight" style="background-image:url(images/bg_1.jpg);">
				<div class="overlay"></div>
				<div class="container">
					<div class="row no-gutters slider-text js-fullheight align-items-center">
						<div class="col-md-12 ftco-animate">
							<div class="text">
								<h1 class="mb-4">Lab 7</h1>
								<p>Grid Localization using Bayes Filter and Mapping</p>
							</div>
						</div>
					</div>
				</div>
			</div>
		</div>
	</section>

	<section class="ftco-section ftco-portfolio bg-light">
		<div class="row justify-content-center no-gutters">
			<div class="col-md-8 heading-section ftco-animate mb-5">
				<h1 class="mb-2 text-center">Part A: Grid Localization using Bayes Filter</h2>
				<h2 class="mb-2 text-center">Objective</h2>
        <p>In a switch up, this week started with the virtual environment. During lecture weâ€™ve spent a good amount of time learning about probability, whether in the context of noisy sensors or predicting position. This lab ramps up to building our own Bayes filter by emphasizing the pseudocode necessary to complete each step.</p>
        <h2 class="mb-2 text-center">Bayes Filter Pseudocode</h2>
        <p>Code was provided that established the robot and a new virtual environment, then controlled the robot to navigate this environment. The video below shows the robot moving around obstacles as its odometry and ground truth readings are plotted.</p>          <img src="images/lab6/imu_addr.png" style="width:500px;height:400px;display:block;margin: 0 auto;">
        <iframe style="display:block;margin: 0 auto;" width="560" height="315" src="https://www.youtube.com/embed/SzYMselYJM8" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>
        <p>Below is the pseudo code written after the code to execute the motion of the robot. This is meant to serve as a guide for the actual implementation of a Bayes Filter. We were able to extend any of the functions to incorporate other parameters or add helper functions.</p>
        <!-- HTML generated using hilite.me --><div style="background: #ffffff; overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;"><pre style="margin: 0; line-height: 125%"><span style="color: #888888"># In world coordinates</span>
        <span style="color: #008800; font-weight: bold">def</span> <span style="color: #0066BB; font-weight: bold">compute_control</span>(cur_pose, prev_pose):
        <span style="color: #DD4422">&quot;&quot;&quot; Given the current and previous odometry poses, this function extracts</span>
        <span style="color: #DD4422">    the control information based on the odometry motion model.</span>

        <span style="color: #DD4422">    Args:</span>
        <span style="color: #DD4422">        cur_pose  ([Pose]): Current Pose</span>
        <span style="color: #DD4422">        prev_pose ([Pose]): Previous Pose </span>

        <span style="color: #DD4422">    Returns:</span>
        <span style="color: #DD4422">        [delta_rot_1]: Rotation 1  (degrees)</span>
        <span style="color: #DD4422">        [delta_trans]: Translation (meters)</span>
        <span style="color: #DD4422">        [delta_rot_2]: Rotation 2  (degrees)</span>
        <span style="color: #DD4422">    &quot;&quot;&quot;</span>
        delta_x <span style="color: #333333">=</span> cur_pose[<span style="color: #0000DD; font-weight: bold">0</span>] <span style="color: #333333">-</span> prev_pose[<span style="color: #0000DD; font-weight: bold">0</span>] <span style="color: #888888">#this is equal to the amount of translational change in x</span>
        delta_y <span style="color: #333333">=</span> cur_pose[<span style="color: #0000DD; font-weight: bold">1</span>] <span style="color: #333333">-</span> prev_pose[<span style="color: #0000DD; font-weight: bold">1</span>] <span style="color: #888888">#this is equal to the amount of translational change in y</span>
        delta_yaw <span style="color: #333333">=</span> cur_pose[<span style="color: #0000DD; font-weight: bold">2</span>] <span style="color: #333333">-</span> prev_pose[<span style="color: #0000DD; font-weight: bold">2</span>] <span style="color: #888888">#this is equal to the amount of rotational change in yaw</span>

        delta_rot_1 <span style="color: #333333">=</span> Math<span style="color: #333333">.</span>tan(delta_y<span style="color: #333333">/</span>delta_x) <span style="color: #888888">#angular change due to a change in position is equal to tan of change in y/change in x</span>
        delta_trans <span style="color: #333333">=</span> Math<span style="color: #333333">.</span>sqrt((delta_x <span style="color: #333333">**</span> <span style="color: #0000DD; font-weight: bold">2</span>) <span style="color: #333333">+</span> (delta_y <span style="color: #333333">**</span> <span style="color: #0000DD; font-weight: bold">2</span>)) <span style="color: #888888">#distance between two points</span>
        delta_rot_2 <span style="color: #333333">=</span> delta_yaw <span style="color: #333333">+</span> delta_rot_1 <span style="color: #888888">#pre-calculated change in yaw</span>

        <span style="color: #008800; font-weight: bold">return</span> delta_rot_1, delta_trans, delta_rot_2

        <span style="color: #888888"># In world coordinates</span>
        <span style="color: #008800; font-weight: bold">def</span> <span style="color: #0066BB; font-weight: bold">odom_motion_model</span>(cur_pose, prev_pose, u):
        <span style="color: #DD4422">&quot;&quot;&quot; Odometry Motion Model</span>

        <span style="color: #DD4422">    Args:</span>
        <span style="color: #DD4422">        cur_pose  ([Pose]): Current Pose</span>
        <span style="color: #DD4422">        prev_pose ([Pose]): Previous Pose</span>
        <span style="color: #DD4422">        (rot1, trans, rot2) (float, float, float): A tuple with control data in the format </span>
        <span style="color: #DD4422">                                                   format (rot1, trans, rot2) with units (degrees, meters, degrees)</span>


        <span style="color: #DD4422">    Returns:</span>
        <span style="color: #DD4422">        prob [float]: Probability p(x&#39;|x, u)</span>
        <span style="color: #DD4422">    &quot;&quot;&quot;</span>
        <span style="color: #888888">#This is an implementation of the Bayes filter following the Markov assumption on state x_t (cur_pose)</span>
        <span style="color: #888888">#Transition probability/action model for the prediction step</span>
        <span style="color: #888888">#It specifies how the robot state evolves over time as a function of robot controls u_t</span>
        <span style="color: #888888">#p(x&#39;|x,u) = (p(x,u | x&#39;) * p(x&#39;)) / (p(x,u)) = eta * p(x,u | x&#39;) * p(x&#39;)</span>

        computed_control <span style="color: #333333">=</span> compute_control(cur_pose, prev_pose);
        delta_trans <span style="color: #333333">=</span> computed_control[<span style="color: #0000DD; font-weight: bold">0</span>];
        delta_rot_1 <span style="color: #333333">=</span> computed_control[<span style="color: #0000DD; font-weight: bold">1</span>];
        delta_rot_2 <span style="color: #333333">=</span> computed_control[<span style="color: #0000DD; font-weight: bold">2</span>];


        <span style="color: #888888">#calculate probability of each condition </span>
        prob1 <span style="color: #333333">=</span> loc<span style="color: #333333">.</span>gaussian(delta_trans, u[<span style="color: #0000DD; font-weight: bold">0</span>], loc<span style="color: #333333">.</span>odom_trans_sigma);
        prob2 <span style="color: #333333">=</span> loc<span style="color: #333333">.</span>gaussian(delta_rot_1, u[<span style="color: #0000DD; font-weight: bold">1</span>], loc<span style="color: #333333">.</span>odom_rot_sigma);
        prob3 <span style="color: #333333">=</span> loc<span style="color: #333333">.</span>gaussian(delta_rot_2, u[<span style="color: #0000DD; font-weight: bold">2</span>], loc<span style="color: #333333">.</span>odom_rot_sigma);

        prob <span style="color: #333333">=</span> prob1<span style="color: #333333">*</span>prob2<span style="color: #333333">*</span>prob3;

        <span style="color: #008800; font-weight: bold">return</span> prob

        <span style="color: #008800; font-weight: bold">def</span> <span style="color: #0066BB; font-weight: bold">prediction_step</span>(cur_odom, prev_odom):
        <span style="color: #DD4422">&quot;&quot;&quot; Prediction step of the Bayes Filter.</span>
        <span style="color: #DD4422">    Update the probabilities in loc.bel_bar based on loc.bel from the previous time step and the odometry motion model.</span>

        <span style="color: #DD4422">    Args:</span>
        <span style="color: #DD4422">        cur_odom  ([Pose]): Current Pose</span>
        <span style="color: #DD4422">        prev_odom ([Pose]): Previous Pose</span>
        <span style="color: #DD4422">    &quot;&quot;&quot;</span>
        u <span style="color: #333333">=</span> compute_control(cur_odom, prev_odom) <span style="color: #888888">#finding the control information of the robot</span>
        prob <span style="color: #333333">=</span> odom_motion_model(cur_odom, prev_odom, u) <span style="color: #888888">#finding the probability of p(x&#39;|x,u), state transition probability</span>
        loc<span style="color: #333333">.</span>bel_bar <span style="color: #333333">=</span> prob <span style="color: #333333">*</span> loc<span style="color: #333333">.</span>bel

        <span style="color: #008800; font-weight: bold">def</span> <span style="color: #0066BB; font-weight: bold">sensor_model</span>(obs, u):
        <span style="color: #DD4422">&quot;&quot;&quot; This is the equivalent of p(z|x).</span>


        <span style="color: #DD4422">    Args:</span>
        <span style="color: #DD4422">        obs ([ndarray]): A 1D array consisting of the measurements made in rotation loop</span>

        <span style="color: #DD4422">    Returns:</span>
        <span style="color: #DD4422">        [ndarray]: Returns a 1D array of size 18 (=loc.OBS_PER_CELL) with the likelihood of each individual measurements</span>
        <span style="color: #DD4422">    &quot;&quot;&quot;</span>
        <span style="color: #888888">#Calculating measurement probability</span>
        <span style="color: #888888">#It specifies how the measurements are generated from the robot state x_t</span>
        <span style="color: #888888">#p(z|x) = p(x|z) * p(z) / p(x) = eta * p(x|z) * p(z)</span>
        prob_array <span style="color: #333333">=</span> []
        <span style="color: #008800; font-weight: bold">for</span> z <span style="color: #000000; font-weight: bold">in</span> obs:
            prob_array<span style="color: #333333">.</span>append(loc<span style="color: #333333">.</span>gaussian(obs[i], u, loc<span style="color: #333333">.</span>sensor_sigma))

        <span style="color: #008800; font-weight: bold">return</span> prob_array

        <span style="color: #008800; font-weight: bold">def</span> <span style="color: #0066BB; font-weight: bold">update_step</span>(eta, obs, u):
        <span style="color: #DD4422">&quot;&quot;&quot; Update step of the Bayes Filter.</span>
        <span style="color: #DD4422">    Update the probabilities in loc.bel based on loc.bel_bar and the sensor model.</span>
        <span style="color: #DD4422">    &quot;&quot;&quot;</span>
        prob <span style="color: #333333">=</span> sensor_model(obs, u)
        loc<span style="color: #333333">.</span>bel <span style="color: #333333">=</span> eta <span style="color: #333333">*</span> prob <span style="color: #333333">*</span> loc<span style="color: #333333">.</span>bel_bar
        </pre></div>

        <h1 class="mb-2 text-center">Part B: Mapping</h2>
        <h2 class="mb-2 text-center">Objective</h2>
        <p>Last lab centered around establishing a smooth continuous rotation around the z axis by using a PID feedback control loop. That kind of steady motion is extremely useful in the context of an environmental scan, when large amounts of data can be gathered from various sensors in order to better visualize the robotâ€™s surroundings. 
        </p>
        <h2 class="mb-2 text-center">Manual Scans</h2>
        <p>Unfortunately for me, my floor isnâ€™t one thatâ€™s conducive to smooth, controlled turning on Klausâ€™s axis. My PID code worked, but only on the seat of a wooden chair. Rather than let the chair block the sensor and corrupt the readings, I opted for manual turning of the robot. I made sure to keep the center of the robot as centered on the coordinates in question as possible, in addition to taking note of the orientation of Klaus so I wouldnâ€™t accidentally move in front of the sensors.
        </p>
        <p>I decided to use my kitchen as my environment due to its relatively even lighting and its smoother floor (which is possible for Klaus to move on normally, but unfortunately not rotate). My kitchen feeds directly into my living room, so in an effort to restrict the space and give it a more interesting definition, I walled it off with cardboard boxes and added a cooler as a peninsula. </p>
        <img src="images/lab7/env.JPG" style="width:500px;height:400px;display:block;margin: 0 auto;">
        <img src="images/lab7/sketch.JPG" style="width:500px;height:400px;display:block;margin: 0 auto;">
        <p>It took trial and error to develop an environment that Klaus could adequately detect. At first, when the kitchen was open and no obstacles were added, the data didnâ€™t show any right angles and even sometimes missed entire walls.</p>
        <img src="images/lab7/open_kitchen.png" style="width:500px;height:400px;display:block;margin: 0 auto;">
        <img src="images/lab7/missing_wall.png" style="width:500px;height:400px;display:block;margin: 0 auto;">
        <p>As a sanity check, I placed Klaus in a pen constructed of three cardboard boxes and my refrigerator in order to see what data in a very constricted space would look like. Though still not perfectly straight, the walls of the boxes were more defined. Something to note is the reflectivity of my white refrigerator, which may have affected the sensor readings (particularly when Klaus was facing the fridge head on).
        </p>
        <img src="images/lab7/open_kitchen.png" style="width:500px;height:400px;display:block;margin: 0 auto;">
        <img src="images/lab7/missing_wall.png" style="width:500px;height:400px;display:block;margin: 0 auto;">
        <p>Once the final environment was set up, I did two successive manual scans of the kitchen from the middle of the area. To reduce the time spent plugging and unplugging Klaus to my laptop, data was sent via a Bluetooth bytestream. The focus was on data from the time-of-flight sensor and gyroscope, but all raw sensor data was sent in a large packet array so as to back up their readings. I used <a href="https://docs.python.org/2/library/struct.html">this resource</a> to ensure that each of my packets were unpacked properly.
        </p>
        <!-- HTML generated using hilite.me --><div style="background: #ffffff; overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;"><pre style="margin: 0; line-height: 125%"><span style="color: #008800; font-weight: bold">if</span> (bytestream_active)
              {
                counterTransmit<span style="color: #333333">++</span>; 
                <span style="color: #008800; font-weight: bold">if</span> (counterTransmit<span style="color: #333333">&gt;=</span><span style="color: #0000DD; font-weight: bold">20</span>) {
                  t0 <span style="color: #333333">=</span> micros(); <span style="color: #888888">// start time</span>
              
                  <span style="color: #008800; font-weight: bold">if</span>( myICM.dataReady() ){
                    myICM.getAGMT();  
                    
                    <span style="color: #888888">// PITCH</span>
                    pitchAcc <span style="color: #333333">=</span> getPitchAcc(myICM.accX(),myICM.accZ());
                    pitchAccLPF <span style="color: #333333">=</span> applyLPF(pitchAcc, prevPitchAcc, <span style="color: #6600EE; font-weight: bold">0.2</span>);
                    prevPitchAcc <span style="color: #333333">=</span> pitchAccLPF;
                    pitchGyr <span style="color: #333333">=</span> getPitchGyr(pitchGyr, myICM.gyrY());
                    pitchFusion <span style="color: #333333">=</span> (prevPitchFusion <span style="color: #333333">+</span> pitchGyr <span style="color: #333333">*</span> dt<span style="color: #333333">/</span><span style="color: #0000DD; font-weight: bold">1000000</span>) <span style="color: #333333">*</span> (<span style="color: #0000DD; font-weight: bold">1</span><span style="color: #333333">-</span>alpha) <span style="color: #333333">+</span> pitchAccLPF <span style="color: #333333">*</span> alpha;
                    prevPitchFusion <span style="color: #333333">=</span> pitchFusion; 
                
                    <span style="color: #888888">// ROLL</span>
                    rollAcc <span style="color: #333333">=</span> <span style="color: #333333">-</span>getRollAcc(myICM.accY(),myICM.accZ()); <span style="color: #888888">//flipped sign to be consistent with gyroscope data</span>
                    rollAccLPF <span style="color: #333333">=</span> applyLPF(rollAcc, prevRollAcc, alpha);
                    prevRollAcc <span style="color: #333333">=</span> rollAccLPF;
                    rollGyr <span style="color: #333333">=</span> getRollGyr(rollGyr, myICM.gyrX());
                    rollFusion <span style="color: #333333">=</span> (prevRollFusion <span style="color: #333333">+</span> rollGyr <span style="color: #333333">*</span> dt<span style="color: #333333">/</span><span style="color: #0000DD; font-weight: bold">1000000</span>) <span style="color: #333333">*</span> (<span style="color: #0000DD; font-weight: bold">1</span><span style="color: #333333">-</span>alpha) <span style="color: #333333">+</span> rollAccLPF <span style="color: #333333">*</span> alpha;
                    prevRollFusion <span style="color: #333333">=</span> rollFusion;
                
                    <span style="color: #888888">// YAW</span>
                    yawGyr <span style="color: #333333">=</span> getYawGyr(yawGyr, myICM.gyrZ());
                    xMag <span style="color: #333333">=</span> myICM.magX()<span style="color: #333333">*</span>cos(pitchGyr<span style="color: #333333">*</span>M_PI<span style="color: #333333">/</span><span style="color: #0000DD; font-weight: bold">180</span>)<span style="color: #333333">-</span>myICM.magZ()<span style="color: #333333">*</span>sin(pitchGyr<span style="color: #333333">*</span>M_PI<span style="color: #333333">/</span><span style="color: #0000DD; font-weight: bold">180</span>);
                    yMag <span style="color: #333333">=</span> myICM.magY()<span style="color: #333333">*</span>sin(pitchGyr<span style="color: #333333">*</span>M_PI<span style="color: #333333">/</span><span style="color: #0000DD; font-weight: bold">180</span>)<span style="color: #333333">*</span>sin(rollGyr<span style="color: #333333">*</span>M_PI<span style="color: #333333">/</span><span style="color: #0000DD; font-weight: bold">180</span>)<span style="color: #333333">-</span>myICM.magY()<span style="color: #333333">*</span>cos(rollGyr<span style="color: #333333">*</span>M_PI<span style="color: #333333">/</span><span style="color: #0000DD; font-weight: bold">180</span>)<span style="color: #333333">+</span>myICM.magZ()<span style="color: #333333">*</span>cos(pitchGyr<span style="color: #333333">*</span>M_PI<span style="color: #333333">/</span><span style="color: #0000DD; font-weight: bold">180</span>)<span style="color: #333333">*</span>cos(rollGyr<span style="color: #333333">*</span>M_PI<span style="color: #333333">/</span><span style="color: #0000DD; font-weight: bold">180</span>);
                    yawMag <span style="color: #333333">=</span> atan2((myICM.magX()<span style="color: #333333">*</span>cos(pitchFusion) <span style="color: #333333">+</span> myICM.magZ()<span style="color: #333333">*</span>sin(pitchFusion)), (myICM.magY()<span style="color: #333333">*</span>cos(rollFusion) <span style="color: #333333">+</span> myICM.magZ()<span style="color: #333333">*</span>sin(rollFusion)));
                    
                    distance <span style="color: #333333">=</span> distanceSensor.getDistance(); <span style="color: #888888">//Get the result of the measurement from the ToF sensor</span>
                    proxValue <span style="color: #333333">=</span> proximitySensor.getProximity();  <span style="color: #888888">//Get result from prox sensor</span>
                    distanceSensor.clearInterrupt();
              
                    Serial.print(micros());
                    Serial.print(<span style="background-color: #fff0f0">&quot;, &quot;</span>);
                    Serial.print(distance);
                    Serial.print(<span style="background-color: #fff0f0">&quot;, &quot;</span>);
                    Serial.print(proxValue);
                    Serial.print(<span style="background-color: #fff0f0">&quot;, &quot;</span>);
                    Serial.print(pitchFusion);
                    Serial.print(<span style="background-color: #fff0f0">&quot;, &quot;</span>);
                    Serial.print(rollFusion);
                    Serial.print(<span style="background-color: #fff0f0">&quot;, &quot;</span>);
                    Serial.print(yawGyr);
                    Serial.print(<span style="background-color: #fff0f0">&quot;</span><span style="color: #666666; font-weight: bold; background-color: #fff0f0">\n</span><span style="background-color: #fff0f0">&quot;</span>);

                    res_cmd<span style="color: #333333">-&gt;</span>command_type <span style="color: #333333">=</span> BYTESTREAM_TX;  <span style="color: #888888">//set command type to bytestream transmit</span>
                    res_cmd<span style="color: #333333">-&gt;</span>length <span style="color: #333333">=</span> <span style="color: #0000DD; font-weight: bold">26</span>;                    <span style="color: #888888">//length doesn&#39;t matter since the handler will take care of this</span>
                    <span style="color: #888888">//TODO: Put an example of a 32-bit integer and a 64-bit integer</span>
                    <span style="color: #888888">//for the stream. Be sure to add a corresponding case in the</span>
                    <span style="color: #888888">//python program.</span>
                    <span style="color: #888888">//Serial.printf(&quot;Stream %d \n&quot;, bytestream_active);</span>
                
                    <span style="color: #888888">// pack up data to send</span>
                    <span style="color: #333399; font-weight: bold">unsigned</span> <span style="color: #333399; font-weight: bold">long</span> t<span style="color: #333333">=</span>micros(); <span style="color: #888888">//send current time for x axis</span>
                    memcpy(res_cmd<span style="color: #333333">-&gt;</span>data, <span style="color: #333333">&amp;</span>t, <span style="color: #0000DD; font-weight: bold">4</span>); 
                    memcpy(res_cmd<span style="color: #333333">-&gt;</span>data<span style="color: #333333">+</span><span style="color: #0000DD; font-weight: bold">4</span>, <span style="color: #333333">&amp;</span>distance, <span style="color: #0000DD; font-weight: bold">4</span>);
                    memcpy(res_cmd<span style="color: #333333">-&gt;</span>data<span style="color: #333333">+</span><span style="color: #0000DD; font-weight: bold">8</span>, <span style="color: #333333">&amp;</span>proxValue, <span style="color: #0000DD; font-weight: bold">4</span>);
                    memcpy(res_cmd<span style="color: #333333">-&gt;</span>data<span style="color: #333333">+</span><span style="color: #0000DD; font-weight: bold">12</span>, <span style="color: #333333">&amp;</span>pitchFusion, <span style="color: #0000DD; font-weight: bold">4</span>);
                    memcpy(res_cmd<span style="color: #333333">-&gt;</span>data<span style="color: #333333">+</span><span style="color: #0000DD; font-weight: bold">16</span>, <span style="color: #333333">&amp;</span>rollFusion, <span style="color: #0000DD; font-weight: bold">4</span>);
                    memcpy(res_cmd<span style="color: #333333">-&gt;</span>data<span style="color: #333333">+</span><span style="color: #0000DD; font-weight: bold">20</span>, <span style="color: #333333">&amp;</span>yawGyr, <span style="color: #0000DD; font-weight: bold">4</span>);
                    amdtpsSendData((<span style="color: #333399; font-weight: bold">uint8_t</span> <span style="color: #333333">*</span>)res_cmd, <span style="color: #0000DD; font-weight: bold">26</span>);  <span style="color: #888888">//2 bytes for type and length, 14 bytes of data</span>
                  }<span style="color: #008800; font-weight: bold">else</span>{
                    Serial.println(<span style="background-color: #fff0f0">&quot;Waiting for data&quot;</span>);
                    delay(<span style="color: #0000DD; font-weight: bold">500</span>);
                  } 
                    counterTransmit <span style="color: #333333">=</span> <span style="color: #0000DD; font-weight: bold">0</span>;
                }
                <span style="color: #888888">//Print time</span>
                <span style="color: #333399; font-weight: bold">unsigned</span> <span style="color: #333399; font-weight: bold">long</span> t <span style="color: #333333">=</span> micros();
                Serial.printf(<span style="background-color: #fff0f0">&quot;Packet %d sent at %d micro seconds </span><span style="color: #666666; font-weight: bold; background-color: #fff0f0">\n</span><span style="background-color: #fff0f0">&quot;</span>, packet_count, t);
                packet_count<span style="color: #333333">++</span>;
              }
          </pre></div>
          <p>This data was plotted with the following code:</p>
          <!-- HTML generated using hilite.me --><div style="background: #ffffff; overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;"><pre style="margin: 0; line-height: 125%"><span style="color: #008800; font-weight: bold">import</span> <span style="color: #0e84b5; font-weight: bold">numpy</span> <span style="color: #008800; font-weight: bold">as</span> <span style="color: #0e84b5; font-weight: bold">np</span>  <span style="color: #888888">#used for generating arrays</span>
          <span style="color: #008800; font-weight: bold">import</span> <span style="color: #0e84b5; font-weight: bold">matplotlib.pyplot</span> <span style="color: #008800; font-weight: bold">as</span> <span style="color: #0e84b5; font-weight: bold">plot</span>  <span style="color: #888888">#used for graphs to visualize data</span>
          <span style="color: #008800; font-weight: bold">from</span> <span style="color: #0e84b5; font-weight: bold">scipy</span> <span style="color: #008800; font-weight: bold">import</span> pi
          <span style="color: #008800; font-weight: bold">from</span> <span style="color: #0e84b5; font-weight: bold">scipy.fftpack</span> <span style="color: #008800; font-weight: bold">import</span> fft  <span style="color: #888888">#used for the fft algorithm</span>
          <span style="color: #008800; font-weight: bold">import</span> <span style="color: #0e84b5; font-weight: bold">pandas</span> <span style="color: #008800; font-weight: bold">as</span> <span style="color: #0e84b5; font-weight: bold">pd</span>
          <span style="color: #008800; font-weight: bold">import</span> <span style="color: #0e84b5; font-weight: bold">csv</span>
          <span style="color: #008800; font-weight: bold">import</span> <span style="color: #0e84b5; font-weight: bold">math</span>

          r <span style="color: #333333">=</span> []
          theta <span style="color: #333333">=</span> []

          plot<span style="color: #333333">.</span>axes(projection<span style="color: #333333">=</span><span style="background-color: #fff0f0">&#39;polar&#39;</span>)

          <span style="color: #008800; font-weight: bold">with</span> <span style="color: #007020">open</span>(<span style="background-color: #fff0f0">&#39;tmp.csv&#39;</span>, <span style="background-color: #fff0f0">&#39;r&#39;</span>) <span style="color: #008800; font-weight: bold">as</span> csv_file:
              <span style="color: #007020">next</span>(csv_file)
              csv_reader <span style="color: #333333">=</span> csv<span style="color: #333333">.</span>reader(
                  csv_file)  <span style="color: #888888"># Making use of reader method for reading the file</span>
              <span style="color: #008800; font-weight: bold">for</span> line <span style="color: #000000; font-weight: bold">in</span> csv_reader:  <span style="color: #888888">#Iterate through the loop to read line by line</span>
                  r<span style="color: #333333">.</span>append(<span style="color: #007020">float</span>(line[<span style="color: #0000DD; font-weight: bold">9</span>]))
                  t <span style="color: #333333">=</span> math<span style="color: #333333">.</span>radians(<span style="color: #007020">float</span>(line[<span style="color: #0000DD; font-weight: bold">13</span>]))
                  theta<span style="color: #333333">.</span>append(t)

          <span style="color: #888888"># Set the title of the polar plot</span>
          plot<span style="color: #333333">.</span>title(<span style="background-color: #fff0f0">&#39;Kitchen Mapping Using ToF and Gyroscope Data&#39;</span>)

          <span style="color: #008800; font-weight: bold">for</span> i <span style="color: #000000; font-weight: bold">in</span> <span style="color: #007020">range</span>(<span style="color: #0000DD; font-weight: bold">0</span>, <span style="color: #007020">len</span>(theta)):
              plot<span style="color: #333333">.</span>polar(theta[i], r[i], <span style="background-color: #fff0f0">&#39;o&#39;</span>)

          <span style="color: #888888"># Display the Polar plot</span>
          plot<span style="color: #333333">.</span>show()
          </pre></div>
          <p>The first scan is more true to the actual shape of the kitchen. Reasoning for the inaccuracy of the second scan is the inherent jerkiness of the wheels; even when being moved manually, the wheels have a good amount of traction, which may have skewed the sensor data at some and therefore propagated that error throughout the scan. Additionally, as will be made more clear later, the ToF sensors arenâ€™t very reliable. One theory is that the reflectivity of the gray flooring may be interfering with the sensing capabilities of the ToF sensor. It also may be an issue of resolution in that the walls of the space may be too far away for the sensor to give accurate, granular readings of distance.
          </p>
          <img src="images/lab7/kitchen_scan.png" style="width:500px;height:400px;display:block;margin: 0 auto;">
          <h2 class="mb-2 text-center">Transformation Matrices</h2>
          <p>Referencing work from Daniel DiAngelis and Katie Bradford, I tried two different transformation matrices to convert my data from the polar coordinate system to my world coordinate system. There were mixed results.
          </p>
          <p>My first attempt centered around the following equation, which describes that the position in the world coordinate frame is equal to the product of the transformation matrix from the world frame to the robot frame, the transformation matrix from the robot frame to the sensor frame, and the position of the robot via sensor readings.
          </p>
          <img src="images/lab7/t_matrix.png" style="width:500px;height:400px;display:block;margin: 0 auto;">
          <!-- HTML generated using hilite.me --><div style="background: #ffffff; overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;"><pre style="margin: 0; line-height: 125%">theta = <span style="color: #333333">-</span>yaw<span style="color: #333333">*</span><span style="color: #007020">pi</span><span style="color: #333333">/</span><span style="color: #0000DD; font-weight: bold">180</span>; 
          distance = tof;
          x = <span style="color: #007020">zeros</span>(<span style="color: #0000DD; font-weight: bold">1</span>, <span style="color: #007020">length</span>(theta));  <span style="color: #888888">% vector for x values</span>
          y = <span style="color: #007020">zeros</span>(<span style="color: #0000DD; font-weight: bold">1</span>, <span style="color: #007020">length</span>(theta));  <span style="color: #888888">% vector for y values</span>
          <span style="color: #008800; font-weight: bold">for</span> k=<span style="color: #0000DD; font-weight: bold">1</span>:<span style="color: #007020">length</span>(theta)  <span style="color: #888888">% for each measurement</span>
              pos_sensor = [distance(k); <span style="color: #0000DD; font-weight: bold">0</span>; <span style="color: #0000DD; font-weight: bold">1</span>];
              robot2world = [<span style="color: #007020">cos</span>(theta(k)) <span style="color: #333333">-</span><span style="color: #007020">sin</span>(theta(k)) xR;
                            <span style="color: #007020">sin</span>(theta(k))  <span style="color: #007020">cos</span>(theta(k)) yR;
                            <span style="color: #0000DD; font-weight: bold">0</span>            <span style="color: #0000DD; font-weight: bold">0</span>           <span style="color: #0000DD; font-weight: bold">1</span> ];
              sensor2robot = [<span style="color: #0000DD; font-weight: bold">1</span> <span style="color: #0000DD; font-weight: bold">0</span> <span style="color: #6600EE; font-weight: bold">63.5</span>;
                              <span style="color: #0000DD; font-weight: bold">0</span> <span style="color: #0000DD; font-weight: bold">1</span> <span style="color: #6600EE; font-weight: bold">12.7</span>;
                              <span style="color: #0000DD; font-weight: bold">0</span> <span style="color: #0000DD; font-weight: bold">0</span> <span style="color: #0000DD; font-weight: bold">1</span> ];
              pos_world = robot2world<span style="color: #333333">*</span>sensor2robot<span style="color: #333333">*</span>pos_sensor;
              x(k) = PW(<span style="color: #0000DD; font-weight: bold">1</span>);
              y(k) = PW(<span style="color: #0000DD; font-weight: bold">2</span>);
          <span style="color: #008800; font-weight: bold">end</span>
          </pre></div>
          <p>For the matrix from robot to sensor frame,  I determined the sensor to be offset from the center of the robot (the point at which rotations were made) to be 63.5mm in the x direction and 12.7mm in the y direction. This was taking into consideration the coordination axes of the ToF sensor.
          </p>
          <img src="images/lab7/world_coords.png" style="width:500px;height:400px;display:block;margin: 0 auto;">
          <p>xR and yR then became the coordinates of the robot at each manual scan. The coordinates had to be converted into mm, taking into consideration the offset of the origin from the corner of the room (since I couldnâ€™t shove Klaus into a corner). With that scenario, the following graph was plotted, with the outline of the space plotted for reference:</p>
          <img src="images/lab7/first_matrix.png" style="width:500px;height:400px;display:block;margin: 0 auto;">
          <p>This data was confusing because each set seemed similar to the shape of the areas, but was incorrect with regards to orientation and scaling. With this in mind, I experimented with setting xR and yR to be the coordinates of the origin (xR = 114.3, yR = 177.8) and ended up with a more reasonable looking plot. However, I was uneasy about the reasoning for setting xR and yR to the origin.
          </p>
          <img src="images/lab7/first_matrix_origin.png" style="width:500px;height:400px;display:block;margin: 0 auto;">
          <p>Thatâ€™s when I decided to try out a rotational matrix around the z axis, exactly the movement Klaus was performing for the scan. This was explicitly offset by the coordinates defined for the origin, 114.3 and 177.8</p>
          <img src="images/lab7/r_matrix.png" style="width:500px;height:400px;display:block;margin: 0 auto;">
          <!-- HTML generated using hilite.me --><div style="background: #ffffff; overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;"><pre style="margin: 0; line-height: 125%">heta         = yaw;
          theta_radians = deg2rad(theta);
          r             = tof;
          
          x_data = <span style="color: #007020">zeros</span>(<span style="color: #0000DD; font-weight: bold">1</span>, <span style="color: #007020">length</span>(r));
          y_data = <span style="color: #007020">zeros</span>(<span style="color: #0000DD; font-weight: bold">1</span>, <span style="color: #007020">length</span>(r));
          <span style="color: #008800; font-weight: bold">for</span> <span style="color: #007020">i</span> = <span style="color: #0000DD; font-weight: bold">1</span>:<span style="color: #007020">length</span>(r)
              r_matrix = [r(<span style="color: #007020">i</span>); <span style="color: #0000DD; font-weight: bold">0</span>; <span style="color: #0000DD; font-weight: bold">1</span>];
              rotation_matrix = [<span style="color: #007020">cos</span>(theta_radians(<span style="color: #007020">i</span>)) <span style="color: #333333">-</span><span style="color: #007020">sin</span>(theta_radians(<span style="color: #007020">i</span>)) <span style="color: #0000DD; font-weight: bold">0</span>; <span style="color: #007020">sin</span>(theta_radians(<span style="color: #007020">i</span>)) <span style="color: #007020">cos</span>(theta_radians(<span style="color: #007020">i</span>)) <span style="color: #0000DD; font-weight: bold">0</span>; <span style="color: #0000DD; font-weight: bold">0</span> <span style="color: #0000DD; font-weight: bold">0</span> <span style="color: #0000DD; font-weight: bold">1</span>;];
              new_matrix = rotation_matrix<span style="color: #333333">*</span>r_matrix;
              x_data(<span style="color: #007020">i</span>) = (new_matrix(<span style="color: #0000DD; font-weight: bold">1</span>)<span style="color: #333333">-</span><span style="color: #6600EE; font-weight: bold">114.3</span>);
              y_data(<span style="color: #007020">i</span>) = (new_matrix(<span style="color: #0000DD; font-weight: bold">2</span>)<span style="color: #333333">-</span><span style="color: #6600EE; font-weight: bold">177.8</span>);
          <span style="color: #008800; font-weight: bold">end</span>
          </pre></div>
          <p>The plotted data has more of a resemblance to the shape of the environment, but there are residual issues with the orientation of the data. Similar to my original issue with transformation matrices, each dataset performs a scan that looks like the room, but the angle at which itâ€™s oriented depends on the initial coordinates. I didnâ€™t have time to debug it but that leads me to believe there needs to be more filtering for the gyroscope.
          </p>
          <img src="images/lab7/second_matrix.png" style="width:500px;height:400px;display:block;margin: 0 auto;">
          <h2 class="mb-2 text-center">Simulation Boundaries</h2>
          <p>If there was a constraint on the number of readings that could be taken, the readings at every angle could be averaged. Especially as the robot spends more time in a specific position and orientation, the readings reach a sort of steady state and can be more reliable, in addition to less wasteful in terms of space.
          </p>
          <p>After drawing out the environment by hand, I was able to determine the start and end coordinate arrays pretty easily.
          </p>
          <!-- HTML generated using hilite.me --><div style="background: #ffffff; overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;"><pre style="margin: 0; line-height: 125%"><span style="color: #888888"># Start points for each line segment describing the map</span>
          start_points <span style="color: #333333">=</span> np<span style="color: #333333">.</span>array([[<span style="color: #0000DD; font-weight: bold">0</span>, <span style="color: #0000DD; font-weight: bold">0</span>],
          [<span style="color: #0000DD; font-weight: bold">0</span>,<span style="color: #0000DD; font-weight: bold">2</span>],
          [<span style="color: #0000DD; font-weight: bold">3</span>,<span style="color: #0000DD; font-weight: bold">2</span>],
          [<span style="color: #0000DD; font-weight: bold">3</span>,<span style="color: #0000DD; font-weight: bold">3</span>],
          [<span style="color: #0000DD; font-weight: bold">0</span>,<span style="color: #0000DD; font-weight: bold">3</span>],
          [<span style="color: #0000DD; font-weight: bold">0</span>,<span style="color: #0000DD; font-weight: bold">7</span>],
          [<span style="color: #0000DD; font-weight: bold">4</span>,<span style="color: #0000DD; font-weight: bold">7</span>],
          [<span style="color: #0000DD; font-weight: bold">4</span>,<span style="color: #0000DD; font-weight: bold">5</span>],
          [<span style="color: #6600EE; font-weight: bold">8.5</span>,<span style="color: #0000DD; font-weight: bold">5</span>],
          [<span style="color: #6600EE; font-weight: bold">8.5</span>,<span style="color: #0000DD; font-weight: bold">3</span>],
          [<span style="color: #0000DD; font-weight: bold">5</span>,<span style="color: #0000DD; font-weight: bold">1</span>]])

          <span style="color: #888888"># End points for each line segment describing the map</span>
          end_points <span style="color: #333333">=</span> np<span style="color: #333333">.</span>array([  [<span style="color: #0000DD; font-weight: bold">0</span>,<span style="color: #0000DD; font-weight: bold">2</span>],
          [<span style="color: #0000DD; font-weight: bold">3</span>,<span style="color: #0000DD; font-weight: bold">2</span>],
          [<span style="color: #0000DD; font-weight: bold">3</span>,<span style="color: #0000DD; font-weight: bold">3</span>],
          [<span style="color: #0000DD; font-weight: bold">0</span>,<span style="color: #0000DD; font-weight: bold">3</span>],
          [<span style="color: #0000DD; font-weight: bold">0</span>,<span style="color: #0000DD; font-weight: bold">7</span>],
          [<span style="color: #0000DD; font-weight: bold">4</span>,<span style="color: #0000DD; font-weight: bold">7</span>],
          [<span style="color: #0000DD; font-weight: bold">4</span>,<span style="color: #0000DD; font-weight: bold">5</span>],
          [<span style="color: #6600EE; font-weight: bold">8.5</span>,<span style="color: #0000DD; font-weight: bold">5</span>],
          [<span style="color: #6600EE; font-weight: bold">8.5</span>,<span style="color: #0000DD; font-weight: bold">3</span>],
          [<span style="color: #0000DD; font-weight: bold">5</span>,<span style="color: #0000DD; font-weight: bold">1</span>],
          [<span style="color: #0000DD; font-weight: bold">0</span>,<span style="color: #0000DD; font-weight: bold">0</span>]])
          </pre></div>
          <p>Plotting in the virtual machine resulted in the following shape:
          </p>
          <img src="images/lab7/plot_env.png" style="width:500px;height:400px;display:block;margin: 0 auto;">
        </div>
		</div>
	</section>

	<!-- <section class="ftco-section bg-light">
		<div class="container">
			<div class="row justify-content-center mb-5">
				<div class="col-md-7 heading-section text-center ftco-animate">
					<h2>Recent Blog</h2>
				</div>
			</div>
			<div class="row d-flex">
				<div class="col-md-3 d-flex ftco-animate">
					<div class="blog-entry justify-content-end">
						<div class="text">
							<h3 class="heading mb-3"><a href="#">Amplify your blockchain team</a></h3>
							<a href="blog-single.html" class="block-20 img" style="background-image: url('images/image_1.jpg');">
							</a>
							<div class="meta mb-3">
								<div><a href="#">June 01, 2020</a></div>
								<div><a href="#">Admin</a></div>
								<div><a href="#" class="meta-chat"><span class="fa fa-comment"></span> 3</a></div>
							</div>
							<p>Far far away, behind the word mountains, far from the countries Vokalia and Consonantia.</p>
						</div>
					</div>
				</div>
				<div class="col-md-3 d-flex ftco-animate">
					<div class="blog-entry justify-content-end">
						<div class="text">
							<h3 class="heading mb-3"><a href="#">Amplify your blockchain team</a></h3>
							<a href="blog-single.html" class="block-20 img" style="background-image: url('images/image_2.jpg');">
							</a>
							<div class="meta mb-3">
								<div><a href="#">June 01, 2020</a></div>
								<div><a href="#">Admin</a></div>
								<div><a href="#" class="meta-chat"><span class="fa fa-comment"></span> 3</a></div>
							</div>
							<p>Far far away, behind the word mountains, far from the countries Vokalia and Consonantia.</p>
						</div>
					</div>
				</div>
				<div class="col-md-3 d-flex ftco-animate">
					<div class="blog-entry justify-content-end">
						<div class="text">
							<h3 class="heading mb-3"><a href="#">Amplify your blockchain team</a></h3>
							<a href="blog-single.html" class="block-20 img" style="background-image: url('images/image_3.jpg');">
							</a>
							<div class="meta mb-3">
								<div><a href="#">June 01, 2020</a></div>
								<div><a href="#">Admin</a></div>
								<div><a href="#" class="meta-chat"><span class="fa fa-comment"></span> 3</a></div>
							</div>
							<p>Far far away, behind the word mountains, far from the countries Vokalia and Consonantia.</p>
						</div>
					</div>
				</div>
				<div class="col-md-3 d-flex ftco-animate">
					<div class="blog-entry justify-content-end">
						<div class="text">
							<h3 class="heading mb-3"><a href="#">Amplify your blockchain team</a></h3>
							<a href="blog-single.html" class="block-20 img" style="background-image: url('images/image_4.jpg');">
							</a>
							<div class="meta mb-3">
								<div><a href="#">June 01, 2020</a></div>
								<div><a href="#">Admin</a></div>
								<div><a href="#" class="meta-chat"><span class="fa fa-comment"></span> 3</a></div>
							</div>
							<p>Far far away, behind the word mountains, far from the countries Vokalia and Consonantia.</p>
						</div>
					</div>
				</div>
			</div>
		</div>
		<div class="degree-left-footer"></div>
	</section>		 -->

	<footer class="ftco-footer ftco-section">
		<div class="container">
			<div class="row">
				<div class="col-md-12 text-center">
					
					<p><!-- Link back to Colorlib can't be removed. Template is licensed under CC BY 3.0. -->
						Copyright &copy;<script>document.write(new Date().getFullYear());</script> All rights reserved | This template is made with <i class="fa fa-heart" aria-hidden="true"></i> by <a href="https://colorlib.com" target="_blank">Colorlib</a>
						<!-- Link back to Colorlib can't be removed. Template is licensed under CC BY 3.0. --></p>
					</div>
				</div>
			</div>
		</footer>
		
		

		<!-- loader -->
		<div id="ftco-loader" class="show fullscreen"><svg class="circular" width="48px" height="48px"><circle class="path-bg" cx="24" cy="24" r="22" fill="none" stroke-width="4" stroke="#eeeeee"/><circle class="path" cx="24" cy="24" r="22" fill="none" stroke-width="4" stroke-miterlimit="10" stroke="#F96D00"/></svg></div>


		<script src="js/jquery.min.js"></script>
		<script src="js/jquery-migrate-3.0.1.min.js"></script>
		<script src="js/popper.min.js"></script>
		<script src="js/bootstrap.min.js"></script>
		<script src="js/jquery.easing.1.3.js"></script>
		<script src="js/jquery.waypoints.min.js"></script>
		<script src="js/jquery.stellar.min.js"></script>
		<script src="js/owl.carousel.min.js"></script>
		<script src="js/jquery.magnific-popup.min.js"></script>
		<script src="js/jquery.animateNumber.min.js"></script>
		<script src="js/scrollax.min.js"></script>
		<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyBVWaKrjvy3MaE7SQ74_uJiULgl1JY0H2s&sensor=false"></script>
		<script src="js/google-map.js"></script>
		<script src="js/main.js"></script>
		
	</body>
	</html>